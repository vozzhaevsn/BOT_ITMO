import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import InlineKeyboardMarkup, Update, Message, User as TgUser, CallbackQuery
from telegram.ext import ContextTypes
from handlers import (
    start, register, login, logout, stock, set_subscriptions,
    track, news_subscribe, help_command, subscription_callback
)
from database import User, NewsSubscription, AsyncSessionLocal
import bcrypt
from datetime import datetime
import logging

# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –º–æ–∫–æ–≤ Telegram API
@pytest.fixture
def mock_update():
    update = AsyncMock(spec=Update)
    update.message = AsyncMock(spec=Message)
    update.message.reply_text = AsyncMock()
    update.effective_user = AsyncMock(spec=TgUser)
    update.effective_user.id = 12345
    return update

@pytest.fixture
def mock_context():
    context = AsyncMock(spec=ContextTypes.DEFAULT_TYPE)
    context.args = []
    context.bot = AsyncMock()
    return context

# –¢–µ—Å—Ç 1: –ö–æ–º–∞–Ω–¥–∞ /start
@pytest.mark.asyncio
async def test_start(mock_update, mock_context):
    await start(mock_update, mock_context)
    mock_update.message.reply_text.assert_awaited_with(
        "üìà –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n"
        "/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/login - –≤—Ö–æ–¥"
    )

# –¢–µ—Å—Ç 2: –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@pytest.mark.asyncio
async def test_register_success(mock_update, mock_context):
    mock_context.args = ["test@example.com", "password123"]
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=None))
        
        await register(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_session.add.assert_called_once()
        mock_session.commit.assert_awaited_once()
        mock_update.message.reply_text.assert_awaited_with(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )

# –¢–µ—Å—Ç 3: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email
@pytest.mark.asyncio
async def test_register_duplicate_email(mock_update, mock_context):
    mock_context.args = ["duplicate@test.com", "password123"]
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=User()))  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        await register(mock_update, mock_context)
        mock_update.message.reply_text.assert_awaited_with("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

# –¢–µ—Å—Ç 4: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
@pytest.mark.asyncio
async def test_login_success(mock_update, mock_context):
    mock_context.args = ["test@example.com", "password123"]
    hashed_pw = bcrypt.hashpw(b"password123", bcrypt.gensalt()).decode()
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(email="test@example.com", password_hash=hashed_pw)
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await login(mock_update, mock_context)
        mock_session.commit.assert_awaited_once()
        mock_update.message.reply_text.assert_awaited_with("üîì –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")

# –¢–µ—Å—Ç 5: –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
@pytest.mark.asyncio
async def test_login_wrong_password(mock_update, mock_context):
    mock_context.args = ["test@example.com", "wrongpass"]
    hashed_pw = bcrypt.hashpw(b"password123", bcrypt.gensalt()).decode()
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(email="test@example.com", password_hash=hashed_pw)
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await login(mock_update, mock_context)
        mock_update.message.reply_text.assert_awaited_with("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

# –¢–µ—Å—Ç 6: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
@pytest.mark.asyncio
async def test_logout(mock_update, mock_context):
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(is_authenticated=True)
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await logout(mock_update, mock_context)
        assert mock_user.is_authenticated is False
        mock_session.commit.assert_awaited_once()
        mock_update.message.reply_text.assert_awaited_with("üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

# –¢–µ—Å—Ç 7: –ó–∞–ø—Ä–æ—Å –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
@pytest.mark.asyncio
@patch("handlers.exchanges.get_binance_price", new_callable=AsyncMock)
@patch("handlers.exchanges.get_bybit_price", new_callable=MagicMock)
async def test_stock_crypto(mock_bybit, mock_binance, mock_update, mock_context):
    mock_binance.return_value = 50000.0
    mock_bybit.return_value = 49000.0
    mock_context.args = ["BTCUSDT"]
    
    await stock(mock_update, mock_context)
    mock_update.message.reply_text.assert_awaited_with(
        "üìä *BTCUSDT*\n‚Ä¢ Binance: $50000.00\n‚Ä¢ Bybit: $49000.00",
        parse_mode="Markdown"
    )

# –¢–µ—Å—Ç 8: –ó–∞–ø—Ä–æ—Å –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ –¥–ª—è –∞–∫—Ü–∏–π
@pytest.mark.asyncio
@patch("handlers.exchanges.get_moex_price", new_callable=AsyncMock)
@patch("handlers.exchanges.get_tinkoff_price", new_callable=AsyncMock)
async def test_stock_stocks(mock_tinkoff, mock_moex, mock_update, mock_context):
    mock_tinkoff.return_value = 300.0
    mock_moex.return_value = 280.0
    mock_context.args = ["SBER"]
    
    await stock(mock_update, mock_context)
    mock_update.message.reply_text.assert_awaited_with(
        "üìä *SBER*\n‚Ä¢ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: 300.00 RUB\n‚Ä¢ MOEX: 280.00 RUB",
        parse_mode="Markdown"
    )

# –¢–µ—Å—Ç 9: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫
@pytest.mark.asyncio
@patch("handlers.exchanges.get_price", new_callable=AsyncMock)
async def test_stock_error(mock_get_price, mock_update, mock_context):
    mock_get_price.return_value = 0.0
    mock_context.args = ["INVALID"]
    
    await stock(mock_update, mock_context)
    mock_update.message.reply_text.assert_awaited_with("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –¢–µ—Å—Ç 10: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@pytest.mark.asyncio
async def test_set_subscriptions(mock_update, mock_context):
    await set_subscriptions(mock_update, mock_context)
    mock_update.message.reply_text.assert_awaited_with(
        "üîî –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏:",
        reply_markup=MagicMock(spec=InlineKeyboardMarkup)
    )

# –¢–µ—Å—Ç 11: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ —á–µ—Ä–µ–∑ /track
@pytest.mark.asyncio
@patch("handlers.exchanges.get_price", new_callable=AsyncMock)
async def test_track_ticker(mock_get_price, mock_update, mock_context):
    mock_context.args = ["BTCUSDT", "5"]
    mock_get_price.return_value = 50000.0
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(is_authenticated=True, tracked_tickers=[])
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await track(mock_update, mock_context)
        assert len(mock_user.tracked_tickers) == 1
        mock_session.commit.assert_awaited_once()
        mock_update.message.reply_text.assert_awaited_with(
            "‚úÖ –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å BTCUSDT\n‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: 50000.00\n‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 5.0%"
        )

# –¢–µ—Å—Ç 12: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
@pytest.mark.asyncio
async def test_news_subscribe(mock_update, mock_context):
    mock_context.args = ["Bitcoin"]
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(is_authenticated=True)
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await news_subscribe(mock_update, mock_context)
        mock_session.add.assert_called_once()
        mock_session.commit.assert_awaited_once()
        mock_update.message.reply_text.assert_awaited_with("üì∞ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: 'Bitcoin'")

# –¢–µ—Å—Ç 13: –ö–æ–º–∞–Ω–¥–∞ /help
@pytest.mark.asyncio
async def test_help_command(mock_update, mock_context):
    await help_command(mock_update, mock_context)
    mock_update.message.reply_text.assert_awaited_once()

# –¢–µ—Å—Ç 14: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@pytest.mark.asyncio
async def test_subscription_callback(mock_update):
    query = AsyncMock(spec=CallbackQuery)
    query.data = "crypto"
    query.from_user.id = 12345
    update = AsyncMock(spec=Update)
    update.callback_query = query
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(subscriptions={"crypto": False})
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await subscription_callback(update, None)
        assert mock_user.subscriptions["crypto"] is True
        query.edit_message_text.assert_awaited_with(
            "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 'crypto' –≤–∫–ª—é—á–µ–Ω—ã.\n–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {'crypto': True}"
        )
#–¢–µ—Å—Ç 15: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ updated_at –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–∫–µ—Ä–∞—Ö
@pytest.mark.asyncio
@patch("handlers.exchanges.get_price", new_callable=AsyncMock)
async def test_tracked_tickers_timestamp_update(mock_get_price, mock_update, mock_context):
    mock_context.args = ["BTCUSDT"]
    mock_get_price.return_value = 50000.0
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(
            is_authenticated=True,
            tracked_tickers=[{
                "ticker": "BTCUSDT",
                "threshold": 5.0,
                "added_at": "2023-01-01T00:00:00"
            }]
        )
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await track(mock_update, mock_context)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ `updated_at` –æ–±–Ω–æ–≤–ª–µ–Ω
        assert "updated_at" in mock_user.tracked_tickers[0]
        assert mock_user.tracked_tickers[0]["updated_at"] != "2023-01-01T00:00:00"

#–¢–µ—Å—Ç 16: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
@pytest.mark.asyncio
async def test_remove_tracked_ticker(mock_update, mock_context):
    mock_context.args = ["BTCUSDT", "remove"]  # –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: /track BTCUSDT remove
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(
            is_authenticated=True,
            tracked_tickers=[{"ticker": "BTCUSDT", "threshold": 5.0}]
        )
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await track(mock_update, mock_context)
        assert len(mock_user.tracked_tickers) == 0
        mock_update.message.reply_text.assert_awaited_with("üóëÔ∏è –¢–∏–∫–µ—Ä BTCUSDT —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

#–¢–µ—Å—Ç 17: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
@pytest.mark.asyncio
@patch("handlers.exchanges.get_price", new_callable=AsyncMock)
async def test_price_alert_notification(mock_get_price, mock_update, mock_context):
    mock_get_price.return_value = 55000.0  # +10% –æ—Ç 50000 (–ø–æ—Ä–æ–≥ 5%)
    mock_context.args = ["BTCUSDT"]
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(
            is_authenticated=True,
            tracked_tickers=[{
                "ticker": "BTCUSDT",
                "threshold": 5.0,
                "last_price": 50000.0
            }]
        )
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await track(mock_update, mock_context)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        mock_context.bot.send_message.assert_awaited_with(
            chat_id=mock_user.telegram_id,
            text="üîî –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\nüö® BTCUSDT: 10.00% (50000.00 ‚Üí 55000.00)"
        )

#–¢–µ—Å—Ç 18: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã

@pytest.mark.asyncio
@patch("handlers.exchanges.get_price", new_callable=AsyncMock)
async def test_track_price_update_error(mock_get_price, mock_update, mock_context):
    mock_get_price.side_effect = Exception("Binance API Error")
    mock_context.args = ["BTCUSDT"]
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(is_authenticated=True)
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await track(mock_update, mock_context)
        mock_update.message.reply_text.assert_awaited_with(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

#–¢–µ—Å—Ç 19: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã /help

@pytest.mark.asyncio
async def test_help_command_format(mock_update, mock_context):
    await help_command(mock_update, mock_context)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    reply_text = mock_update.message.reply_text.call_args[0][0]
    assert "/register" in reply_text
    assert "/track" in reply_text
    assert "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è" not in reply_text  # –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º

#–¢–µ—Å—Ç 20: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞

@pytest.mark.asyncio
async def test_news_subscribe_empty_query(mock_update, mock_context):
    mock_context.args = []  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –∑–∞–ø—Ä–æ—Å
    
    await news_subscribe(mock_update, mock_context)
    mock_update.message.reply_text.assert_awaited_with(
        "–§–æ—Ä–º–∞—Ç: /news_subscribe <–∑–∞–ø—Ä–æ—Å>\n–ü—Ä–∏–º–µ—Ä: /news_subscribe Bitcoin"
    )