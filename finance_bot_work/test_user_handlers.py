import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import Update, Message, User as TgUser
from telegram.ext import ContextTypes
from handlers import register, login, logout
from database import User, AsyncSessionLocal
import bcrypt

# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –º–æ–∫–æ–≤ Telegram API
@pytest.fixture
def mock_update():
    update = AsyncMock(spec=Update)
    update.message = AsyncMock(spec=Message)
    update.message.reply_text = AsyncMock()
    update.effective_user = AsyncMock(spec=TgUser)
    update.effective_user.id = 12345
    return update

@pytest.fixture
def mock_context():
    context = AsyncMock(spec=ContextTypes.DEFAULT_TYPE)
    context.args = []
    return context

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@pytest.mark.asyncio
async def test_register_new_user(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."""
    mock_context.args = ["test@example.com", "password123"]
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        # –ú–æ–∫ –ø—É—Å—Ç–æ–π –ë–î (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=None))
        
        await register(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞:
        # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î
        mock_session.add.assert_called_once()
        mock_session.commit.assert_awaited_once()
        
        # 2. –ü–∞—Ä–æ–ª—å —Ö–µ—à–∏—Ä—É–µ—Ç—Å—è
        added_user = mock_session.add.call_args[0][0]
        assert bcrypt.checkpw(b"password123", added_user.password_hash.encode())
        
        # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        assert added_user.is_authenticated is True
        
        # 4. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        mock_update.message.reply_text.assert_awaited_with(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
        )

# –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email

@pytest.mark.asyncio
async def test_register_duplicate_email(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ—Å—è email."""
    mock_context.args = ["duplicate@test.com", "password123"]
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        # –ú–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=User()))
        
        await register(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞:
        # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        mock_session.add.assert_not_called()
        
        # 2. –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ
        mock_update.message.reply_text.assert_awaited_with("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

# –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É

@pytest.mark.asyncio
async def test_login_success(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ —Å –≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    mock_context.args = ["test@example.com", "password123"]
    hashed_pw = bcrypt.hashpw(b"password123", bcrypt.gensalt()).decode()
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        # –ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        mock_user = User(email="test@example.com", password_hash=hashed_pw)
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await login(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞:
        # 1. –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω
        assert mock_user.is_authenticated is True
        mock_session.commit.assert_awaited_once()
        
        # 2. –ë–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—Ö–æ–¥
        mock_update.message.reply_text.assert_awaited_with("üîì –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")

# –ù–µ—É–¥–∞—á–Ω—ã–π –≤—Ö–æ–¥ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º

@pytest.mark.asyncio
async def test_login_wrong_password(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è."""
    mock_context.args = ["test@example.com", "wrongpass"]
    hashed_pw = bcrypt.hashpw(b"password123", bcrypt.gensalt()).decode()
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        # –ú–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        mock_user = User(email="test@example.com", password_hash=hashed_pw)
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await login(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞:
        # 1. –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        assert mock_user.is_authenticated is False
        
        # 2. –ë–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç –æ–± –æ—à–∏–±–∫–µ
        mock_update.message.reply_text.assert_awaited_with("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

#–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã

@pytest.mark.asyncio
async def test_logout(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."""
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        # –ú–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        mock_user = User(is_authenticated=True)
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await logout(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞:
        # 1. –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–±—Ä–æ—à–µ–Ω
        assert mock_user.is_authenticated is False
        mock_session.commit.assert_awaited_once()
        
        # 2. –ë–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã—Ö–æ–¥
        mock_update.message.reply_text.assert_awaited_with("üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")