import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import Update, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from handlers import (
    set_subscriptions,
    subscription_callback,
    news_subscribe,
    send_daily_summary,
    check_price_alerts
)
from database import User, NewsSubscription, AsyncSessionLocal
import exchanges
from datetime import datetime
import logging

# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –º–æ–∫–æ–≤ Telegram API
@pytest.fixture
def mock_update():
    update = AsyncMock(spec=Update)
    update.callback_query = AsyncMock(spec=CallbackQuery)
    update.callback_query.data = "crypto"
    update.callback_query.from_user.id = 12345
    update.callback_query.edit_message_text = AsyncMock()
    return update

@pytest.fixture
def mock_context():
    context = AsyncMock(spec=ContextTypes.DEFAULT_TYPE)
    context.bot = AsyncMock()
    return context

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@pytest.mark.asyncio
async def test_set_subscriptions(mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
    await set_subscriptions(mock_update, mock_context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏
    mock_update.message.reply_text.assert_awaited_with(
        "üîî –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='crypto')],
            [InlineKeyboardButton("–ê–∫—Ü–∏–∏", callback_data='stocks')],
            [InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏", callback_data='news')]
        ])
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏
@pytest.mark.asyncio
@patch("exchanges.get_binance_price", new_callable=AsyncMock)
async def test_send_daily_summary(mock_binance, mock_context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫—Ä–∏–ø—Ç—É."""
    mock_binance.return_value = 50000.0  # –¶–µ–Ω–∞ BTC
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
    user = User(telegram_id=12345, subscriptions={"crypto": True})
    
    with patch("database.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_session.execute.return_value = MagicMock(scalars=MagicMock(return_value=[user]))
        
        await send_daily_summary(mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        mock_context.bot.send_message.assert_awaited_with(
            chat_id=12345,
            text="üì∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞:\n‚Çø Bitcoin: $50000.00"
        )

# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
@pytest.mark.asyncio
async def test_news_subscribe_success(mock_update, mock_context):
    """–£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏."""
    mock_context.args = ["Bitcoin"]
    
    with patch("database.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(is_authenticated=True)
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await news_subscribe(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        mock_session.add.assert_called_once()
        mock_session.commit.assert_awaited_once()
        mock_update.message.reply_text.assert_awaited_with(
            "üì∞ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: 'Bitcoin'"
        )

# –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@pytest.mark.asyncio
async def test_news_subscribe_unauthorized(mock_update, mock_context):
    """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –±–µ–∑ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."""
    mock_context.args = ["Bitcoin"]
    
    with patch("database.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=None))
        
        await news_subscribe(mock_update, mock_context)
        mock_update.message.reply_text.assert_awaited_with(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É (/login)"
        )

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
@pytest.mark.asyncio
@patch("exchanges.get_price", new_callable=AsyncMock)
async def test_price_alert_notification(mock_get_price, mock_context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ 5%."""
    mock_get_price.return_value = 105.0  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ 5% (–∏—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞ 100)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º —Ç–∏–∫–µ—Ä–æ–º
    user = User(
        telegram_id=12345,
        tracked_tickers=[{
            "ticker": "AAPL",
            "threshold": 5.0,
            "last_price": 100.0,
            "added_at": datetime.now().isoformat()
        }]
    )
    
    with patch("database.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_session.execute.return_value = MagicMock(scalars=MagicMock(return_value=[user]))
        
        await check_price_alerts(mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        mock_context.bot.send_message.assert_awaited_with(
            chat_id=12345,
            text="üîî –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\nüö® AAPL: 5.00% (100.0 ‚Üí 105.0)"
        )

# –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –º–∞–ª–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
@pytest.mark.asyncio
@patch("exchanges.get_price", new_callable=AsyncMock)
async def test_no_alert_below_threshold(mock_get_price, mock_context):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ (3% –ø—Ä–∏ –ø–æ—Ä–æ–≥–µ 5%)."""
    mock_get_price.return_value = 103.0
    
    user = User(
        telegram_id=12345,
        tracked_tickers=[{
            "ticker": "AAPL",
            "threshold": 5.0,
            "last_price": 100.0,
            "added_at": datetime.now().isoformat()
        }]
    )
    
    with patch("database.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_session.execute.return_value = MagicMock(scalars=MagicMock(return_value=[user]))
        
        await check_price_alerts(mock_context)
        mock_context.bot.send_message.assert_not_called()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≤ –∑–∞–¥–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏
@pytest.mark.asyncio
@patch("exchanges.get_binance_price", new_callable=AsyncMock)
async def test_daily_summary_error(mock_binance, mock_context, caplog):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã."""
    mock_binance.side_effect = Exception("Binance API Error")
    
    user = User(telegram_id=12345, subscriptions={"crypto": True})
    
    with patch("database.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_session.execute.return_value = MagicMock(scalars=MagicMock(return_value=[user]))
        
        await send_daily_summary(mock_context)
        assert "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã BTC" in caplog.text