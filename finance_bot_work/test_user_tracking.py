import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from telegram import Update, Message, User as TgUser
from telegram.ext import ContextTypes
from handlers import track
from database import User, AsyncSessionLocal
import exchanges
from datetime import datetime
import logging

# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –º–æ–∫–æ–≤ Telegram API
@pytest.fixture
def mock_update():
    update = AsyncMock(spec=Update)
    update.message = AsyncMock(spec=Message)
    update.message.reply_text = AsyncMock()
    update.effective_user = AsyncMock(spec=TgUser)
    update.effective_user.id = 12345
    return update

@pytest.fixture
def mock_context():
    context = AsyncMock(spec=ContextTypes.DEFAULT_TYPE)
    context.args = []
    return context

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ä–∞

@pytest.mark.asyncio
@patch("handlers.exchanges.get_price", new_callable=AsyncMock)
async def test_add_tracked_ticker(mock_get_price, mock_update, mock_context):
    """–£—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ —Å –ø–æ—Ä–æ–≥–æ–º 5%."""
    mock_context.args = ["BTCUSDT", "5"]
    mock_get_price.return_value = 50000.0
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(is_authenticated=True, tracked_tickers=[])
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await track(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞:
        # 1. –¢–∏–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫
        assert len(mock_user.tracked_tickers) == 1
        assert mock_user.tracked_tickers[0]["ticker"] == "BTCUSDT"
        assert mock_user.tracked_tickers[0]["threshold"] == 5.0
        
        # 2. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        mock_update.message.reply_text.assert_awaited_with(
            "‚úÖ –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å BTCUSDT\n‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: 50000.00\n‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: 5.0%"
        )

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–∫–µ—Ä–∞
@pytest.mark.asyncio
@patch("handlers.exchanges.get_price", new_callable=AsyncMock)
async def test_update_ticker_threshold(mock_get_price, mock_update, mock_context):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —Å 5% –¥–æ 10%."""
    mock_context.args = ["BTCUSDT", "10"]
    mock_get_price.return_value = 50000.0
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(
            is_authenticated=True,
            tracked_tickers=[{"ticker": "BTCUSDT", "threshold": 5.0}]
        )
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await track(mock_update, mock_context)
        assert mock_user.tracked_tickers[0]["threshold"] == 10.0

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

@pytest.mark.asyncio
async def test_remove_tracked_ticker(mock_update, mock_context):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π /track BTCUSDT remove."""
    mock_context.args = ["BTCUSDT", "remove"]
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(
            is_authenticated=True,
            tracked_tickers=[{"ticker": "BTCUSDT", "threshold": 5.0}]
        )
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await track(mock_update, mock_context)
        assert len(mock_user.tracked_tickers) == 0
        mock_update.message.reply_text.assert_awaited_with("üóëÔ∏è –¢–∏–∫–µ—Ä BTCUSDT —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

@pytest.mark.asyncio
@patch("handlers.exchanges.get_price", new_callable=AsyncMock)
async def test_ticker_timestamp_update(mock_get_price, mock_update, mock_context):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è updated_at –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã."""
    mock_context.args = ["BTCUSDT"]
    mock_get_price.return_value = 50000.0
    
    with patch("handlers.AsyncSessionLocal", new_callable=AsyncMock) as mock_session:
        mock_session.return_value.__aenter__.return_value = mock_session
        mock_user = User(
            is_authenticated=True,
            tracked_tickers=[{
                "ticker": "BTCUSDT",
                "threshold": 5.0,
                "added_at": "2023-01-01T00:00:00"
            }]
        )
        mock_session.execute.return_value = MagicMock(scalar=MagicMock(return_value=mock_user))
        
        await track(mock_update, mock_context)
        assert "updated_at" in mock_user.tracked_tickers[0]
        assert mock_user.tracked_tickers[0]["updated_at"] != "2023-01-01T00:00:00"

# –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã

@pytest.mark.asyncio
@patch("handlers.exchanges.get_price", new_callable=AsyncMock)
async def test_track_price_error(mock_get_price, mock_update, mock_context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã."""
    mock_get_price.side_effect = Exception("API Error")
    mock_context.args = ["INVALID"]
    
    await track(mock_update, mock_context)
    mock_update.message.reply_text.assert_awaited_with(
        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä."
    )