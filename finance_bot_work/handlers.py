from sqlalchemy import select
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes
from database import AsyncSessionLocal, User, NewsSubscription
import bcrypt
import exchanges
import logging
from datetime import datetime

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üìà –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º:\n"
        "/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/login - –≤—Ö–æ–¥"
    )

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if len(context.args) != 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /register email –ø–∞—Ä–æ–ª—å")
        return
    
    email, password = context.args[0], context.args[1]
    hashed = bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()
    
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_user = await session.execute(
            select(User).where(User.email == email)
        )
        if existing_user.scalar():
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(
            email=email,
            password_hash=hashed,
            telegram_id=update.effective_user.id,
            is_authenticated=True
        )
        session.add(new_user)
        await session.commit()
    
    await update.message.reply_text(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
    )

async def login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    if len(context.args) != 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /login email –ø–∞—Ä–æ–ª—å")
        return
    
    email, password = context.args[0], context.args[1]
    
    async with AsyncSessionLocal() as session:
        user = await session.execute(
            select(User).where(User.email == email)
        )
        user = user.scalar()
        
        if not user or not bcrypt.checkpw(password.encode(), user.password_hash.encode()):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
            return
        
        user.is_authenticated = True
        user.telegram_id = update.effective_user.id  # –û–±–Ω–æ–≤–ª—è–µ–º telegram_id
        await session.commit()
    
    await update.message.reply_text("üîì –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É!")

async def logout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    async with AsyncSessionLocal() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == update.effective_user.id)
        )
        user = user.scalar()
        
        if user:
            user.is_authenticated = False
            await session.commit()
    
    await update.message.reply_text("üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

# –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def stock(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞"""
    if not context.args:
        await update.message.reply_text(
            "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
            "/stock BTCUSDT - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (Binance/Bybit)\n"
            "/stock SBER - –∞–∫—Ü–∏–∏ (MOEX/–¢–∏–Ω—å–∫–æ—Ñ—Ñ)\n"
            "/stock AAPL - –∞–∫—Ü–∏–∏ (–¢–∏–Ω—å–∫–æ—Ñ—Ñ)"
        )
        return
    
    ticker = context.args[0].upper()
    message = f"üìä *{ticker}*\n"
    
    try:
        if any(ticker.endswith(ext) for ext in ("USDT", "BTC", "ETH")):
            binance_price = await exchanges.get_binance_price(ticker)
            bybit_price = await exchanges.get_bybit_price(ticker)
            message += (
                f"‚Ä¢ Binance: ${binance_price:.2f}\n"
                f"‚Ä¢ Bybit: ${bybit_price:.2f}"
            )
        else:
            moex_price = await exchanges.get_moex_price(ticker)
            tinkoff_price = await exchanges.get_tinkoff_price(ticker)
            message += (
                f"‚Ä¢ –¢–∏–Ω—å–∫–æ—Ñ—Ñ: {tinkoff_price:.2f} RUB\n"
                f"‚Ä¢ MOEX: {moex_price:.2f} RUB"
            )
        
        await update.message.reply_text(message, parse_mode="Markdown")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stock: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ü–æ–¥–ø–∏—Å–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def set_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [InlineKeyboardButton("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data='crypto')],
        [InlineKeyboardButton("–ê–∫—Ü–∏–∏", callback_data='stocks')],
        [InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏", callback_data='news')]
    ]
    await update.message.reply_text(
        "üîî –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def track(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ä–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    try:
        if len(context.args) < 1:
            await update.message.reply_text(
                "–§–æ—Ä–º–∞—Ç: /track <—Ç–∏–∫–µ—Ä> [–ø–æ—Ä–æ–≥_–≤_%]\n"
                "–ü—Ä–∏–º–µ—Ä: /track BTCUSDT 5 - —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ 5%"
            )
            return

        ticker = context.args[0].upper()
        threshold = float(context.args[1]) if len(context.args) > 1 else 5.0

        async with AsyncSessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            user = await session.execute(
                select(User).where(User.telegram_id == update.effective_user.id)
            )
            user = user.scalar()
            
            if not user or not user.is_authenticated:
                await update.message.reply_text("‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É: /login")
                return

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            try:
                current_price = await exchanges.get_price(ticker)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {ticker}: {e}")
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–∫–µ—Ä.")
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
            tickers = user.tracked_tickers.copy()
            existing_index = next(
                (i for i, t in enumerate(tickers) if t["ticker"] == ticker),
                None
            )

            if existing_index is not None:
                tickers[existing_index] = {
                    "ticker": ticker,
                    "threshold": threshold,
                    "last_price": current_price,
                    "updated_at": datetime.now().isoformat()
                }
            else:
                tickers.append({
                    "ticker": ticker,
                    "threshold": threshold,
                    "last_price": current_price,
                    "added_at": datetime.now().isoformat()
                })

            user.tracked_tickers = tickers
            await session.commit()

        await update.message.reply_text(
            f"‚úÖ –ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å {ticker}\n"
            f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price:.2f}\n"
            f"‚Ä¢ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {threshold}%"
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /track: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def news_subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏"""
    if not context.args:
        await update.message.reply_text(
            "–§–æ—Ä–º–∞—Ç: /news_subscribe <–∑–∞–ø—Ä–æ—Å>\n"
            "–ü—Ä–∏–º–µ—Ä: /news_subscribe Bitcoin"
        )
        return
    
    query = " ".join(context.args)
    
    async with AsyncSessionLocal() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == update.effective_user.id)
        )
        user = user.scalar()
        
        if not user:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É (/login)")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        existing = await session.execute(
            select(NewsSubscription)
            .where(NewsSubscription.user_id == user.id)
            .where(NewsSubscription.query.ilike(query))
        )
        
        if existing.scalar():
            await update.message.reply_text(f"‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'")
            return
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        new_sub = NewsSubscription(
            user_id=user.id,
            query=query
        )
        session.add(new_sub)
        await session.commit()
    
    await update.message.reply_text(
        f"üì∞ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'"
    )

# –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    commands = [
        ("/start", "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        ("/help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        ("/register <email> <–ø–∞—Ä–æ–ª—å>", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
        ("/login <email> <–ø–∞—Ä–æ–ª—å>", "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"),
        ("/logout", "–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"),
        ("/stock <—Ç–∏–∫–µ—Ä>", "–ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–∞"),
        ("/subscriptions", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"),
        ("/track <—Ç–∏–∫–µ—Ä> [–ø–æ—Ä–æ–≥%]", "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω"),
        ("/news_subscribe <–∑–∞–ø—Ä–æ—Å>", "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏")
    ]
    
    text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" + "\n".join(
        f"‚Ä¢ {cmd} ‚Äî {desc}" for cmd, desc in commands
    )
    
    await update.message.reply_text(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
async def subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–¥–ø–∏—Å–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    category = query.data
    user_id = query.from_user.id
    
    async with AsyncSessionLocal() as session:
        user = await session.execute(
            select(User).where(User.telegram_id == user_id)
        )
        user = user.scalar()
        
        if user:
            subscriptions = user.subscriptions.copy()
            subscriptions[category] = not subscriptions.get(category, False)
            user.subscriptions = subscriptions
            await session.commit()
            
            status = "–≤–∫–ª—é—á–µ–Ω—ã" if subscriptions[category] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
            await query.edit_message_text(
                f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ '{category}' {status}.\n"
                f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {subscriptions}"
            )

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(application):
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("register", register))
    application.add_handler(CommandHandler("login", login))
    application.add_handler(CommandHandler("logout", logout))
    application.add_handler(CommandHandler("stock", stock))
    application.add_handler(CommandHandler("subscriptions", set_subscriptions))
    application.add_handler(CommandHandler("track", track))
    application.add_handler(CommandHandler("news_subscribe", news_subscribe))
    application.add_handler(CallbackQueryHandler(subscription_callback, pattern='^(crypto|stocks|news)$'))